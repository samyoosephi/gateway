<?php

namespace Samyoosephi\Gateway\Sadad;

use Exception;
use Illuminate\Support\Facades\Log;
use SoapClient;
use Samyoosephi\Gateway\PortAbstract;
use Samyoosephi\Gateway\PortInterface;

class Sadad extends PortAbstract implements PortInterface
{
	/**
	 * Url of sadad gateway web service
	 *
	 * @var string
	 */
	protected $serverUrl = 'https://sadad.shaparak.ir/services/MerchantUtility.asmx?wsdl';

	/**
	 * Form generated by sadad gateway
	 *
	 * @var string
	 */
	private $form = '';


	/**
	 * {@inheritdoc}
	 */
	public function set($amount)
	{
		$this->amount = intval($amount);

		return $this;
    }

	/**
	 * {@inheritdoc}
	 */
	public function ready()
	{
		$this->sendPayRequest();

		return $this;
	}

	/**
	 * {@inheritdoc}
	 */
	public function redirect()
	{
        return redirect()->to($this->form);

		//$form = $this->form;
		//return \View::make('gateway::sadad-redirector')->with(compact('form'));
	}

	/**
	 * {@inheritdoc}
	 */
	public function verify($transaction)
	{
		parent::verify($transaction);

		$this->verifyPayment();

		return $this;
	}

	/**
	 * Sets callback url
	 * @param $url
	 */
	function setCallback($url)
	{
		$this->callbackUrl = $url;
		return $this;
	}

	/**
	 * Gets callback url
	 * @return string
	 */
	function getCallback()
	{
		if (!$this->callbackUrl)
			$this->callbackUrl = $this->config->get('gateway.sadad.callback-url');

		return $this->makeCallback($this->callbackUrl, ['transaction_id' => $this->transactionId()]);
	}

    function encrypt_pkcs7($str, $key)
    {
        $key = base64_decode($key);
        $ciphertext = OpenSSL_encrypt($str,"DES-EDE3", $key, OPENSSL_RAW_DATA);
        return base64_encode($ciphertext);
    }

    function CallAPI($url, $data = false)
    {
        $curl = curl_init($url);
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($curl, CURLOPT_POSTFIELDS,$data);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($data)));
        $result = curl_exec($curl);
        curl_close($curl);
        return $result;
    }

	/**
	 * Send pay request to server
	 *
	 * @return void
	 *
	 * @throws SadadException
	 */
	protected function sendPayRequest()
	{
		$this->newTransaction();

		$this->form = '';

		try {
            $LocalDateTime=date("m/d/Y g:i:s a");
            $TerminalId = $this->config->get('gateway.sadad.terminalId');
            $MerchantId = $this->config->get('gateway.sadad.merchant');
            $OrderId = $this->transactionId();
            $Amount = $this->amount;
            $key = $this->config->get('gateway.sadad.transactionKey');
            $SignData = $this->encrypt_pkcs7("$TerminalId;$OrderId;$Amount","$key");

            $data = [
                'TerminalId' => $TerminalId,
                'MerchantId' => $MerchantId,
                'Amount'=>$Amount,
                'SignData'=> $SignData,
                'ReturnUrl' => $this->callbackUrl,
                'LocalDateTime' => $LocalDateTime,
                'OrderId' => $OrderId
            ];

            $response = $this->CallAPI('https://sadad.shaparak.ir/vpg/api/v0/Request/PaymentRequest', json_encode($data));
		} catch (Exception $e) {
			$this->transactionFailed();
			$this->newLog('SoapFault', $e->getMessage());
			throw $e;
		}

        $arrres = json_decode($response);
        if($arrres->ResCode != 0)
        {
            $this->newLog($arrres->ResCode, $arrres->Description);
			throw new SadadException($arrres->Description, $arrres->ResCode);
        }

        $Token= $arrres->Token;
        $this->form = "https://sadad.shaparak.ir/VPG/Purchase?Token=$Token";
		//$this->refId = $Token;
		$this->transactionSetRefId();
	}

	/**
	 * Verify user payment from bank server
	 *
	 * @throws SadadException
	 */
	protected function verifyPayment()
	{
        $key = $this->config->get('gateway.sadad.transactionKey');
        $token = request()->token;
        $OrderId = request()->OrderId;
        $ResCode = request()->ResCode;

        if ($ResCode != 0)
            throw new SadadException("تراکنش نا موفق بود در صورت کسر مبلغ از حساب شما حداکثر پس از 72 ساعت مبلغ به حسابتان برمی گردد");

		try {
            $verifyData = [
                'Token' => $token,
                'SignData' => $this->encrypt_pkcs7($token,$key)
            ];

            $result = $this->CallAPI('https://sadad.shaparak.ir/vpg/api/v0/Advice/Verify', json_encode($verifyData));
            $arrres=json_decode($result);

		} catch (\SoapFault $e) {
			$this->transactionFailed();
			$this->newLog('SoapFault', $e->getMessage());
			throw $e;
		}

        if (!in_array($arrres->ResCode, [-1, 0]))
            throw new SadadException("تراکنش نا موفق بود در صورت کسر مبلغ از حساب شما حداکثر پس از 72 ساعت مبلغ به حسابتان برمی گردد");

		//if (empty($result) || !isset($result->AppStatusCode))
		//	throw new SadadException('در دریافت اطلاعات از بانک خطایی رخ داده است.');

		$res = strval($arrres->ResCode);
		$description = strtolower($arrres->Description);
		$this->newLog($res, $description);

		if ($res != 0) {
			$this->transactionFailed();
			throw new SadadException($description, $res);
		}

        $this->ref_id = $arrres->RetrivalRefNo;
		$this->trackingCode = $arrres->SystemTraceNo;
		//$this->cardNumber = $arrres->CustomerCardNumber;
		$this->transactionSucceed();
	}

	/**
	 * Register error to error list
	 *
	 * @param int $code
	 * @param string $message
	 *
	 * @return array|null
	 *
	 * @throws SadadException
	 */
	private function getMessage($code, $message)
	{
		$result = SadadResult::codeResponse($code, $message);
		if ($result) {
			return $result;
		}
		$result = array(
			'code' => SadadResult::UNKNOWN_CODE,
			'message' => SadadResult::UNKNOWN_MESSAGE,
			'fa' => 'خطای ناشناخته',
			'en' => 'Unknown Error',
			'retry' => false
		);


		return $result;
	}
}
